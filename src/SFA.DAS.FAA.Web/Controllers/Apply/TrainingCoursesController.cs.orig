using MediatR;
using Microsoft.AspNetCore.Mvc;
using SFA.DAS.FAA.Application.Commands.UpdateApplication.TrainingCourses;
using SFA.DAS.FAA.Domain.Enums;
using SFA.DAS.FAA.Web.AppStart;
using SFA.DAS.FAA.Web.Infrastructure;
using SFA.DAS.FAA.Web.Models.Apply;

namespace SFA.DAS.FAA.Web.Controllers.Apply;

public class TrainingCoursesController(IMediator mediator) : Controller
{
    private const string ViewPath = "~/Views/apply/trainingcourses/List.cshtml";

    [HttpGet]
    [Route("apply/{applicationId}/trainingcourses/", Name = RouteNames.ApplyApprenticeship.TrainingCourses)]
    public IActionResult Get([FromRoute] Guid applicationId)
    {
<<<<<<< HEAD
        return View(ViewPath, new AddTrainingCourseViewModel
=======
        return View(ViewPath, new TrainingCoursesViewModel
>>>>>>> FAI-1090-CreateTrainingCoursesPage
        {
            ApplicationId = applicationId,
            BackLinkUrl = Url.RouteUrl(RouteNames.Apply, new { applicationId })
        });
    }

    [HttpPost]
    [Route("apply/{applicationId}/trainingcourses/", Name = RouteNames.ApplyApprenticeship.TrainingCourses)]
<<<<<<< HEAD
    public async Task<IActionResult> Post(AddTrainingCourseViewModel viewModel)
    {
        if (string.IsNullOrEmpty(viewModel.AddTrainingCourse))
        {
            ModelState.AddModelError(nameof(viewModel.AddTrainingCourse), "Select if you want to add any training courses");
=======
    public async Task<IActionResult> Post(TrainingCoursesViewModel viewModel)
    {
        if (!ModelState.IsValid)
        {
>>>>>>> FAI-1090-CreateTrainingCoursesPage
            viewModel.BackLinkUrl = Url.RouteUrl(RouteNames.Apply, new { viewModel.ApplicationId });
            return View(ViewPath, viewModel);
        }

        var command = new UpdateTrainingCoursesApplicationCommand
        {
            CandidateId = Guid.Parse(User.Claims.First(c => c.Type.Equals(CustomClaims.CandidateId)).Value),
            ApplicationId = viewModel.ApplicationId,
<<<<<<< HEAD
            TrainingCoursesSectionStatus = viewModel.AddTrainingCourse is "Yes" ? SectionStatus.InProgress : SectionStatus.Completed
=======
            TrainingCoursesSectionStatus = viewModel.DoYouWantToAddAnyTrainingCourses.Value ? SectionStatus.InProgress : SectionStatus.Completed
>>>>>>> FAI-1090-CreateTrainingCoursesPage
        };

        await mediator.Send(command);

<<<<<<< HEAD
        return viewModel.AddTrainingCourse.Equals("Yes")
=======
        return viewModel.DoYouWantToAddAnyTrainingCourses.Value
>>>>>>> FAI-1090-CreateTrainingCoursesPage
            ? RedirectToRoute("/") //TODO: Redirect the user to Add Training Course Page.
            : RedirectToRoute(RouteNames.Apply, new { viewModel.ApplicationId });
    }
}
