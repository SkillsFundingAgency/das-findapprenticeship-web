// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.FAA.Web.AcceptanceTests.Features.Apply
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Qualifications")]
    public partial class QualificationsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Qualifications.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Apply", "Qualifications", "As an FAA User\r\nI can complete the Qualifications section\r\nSo that I can show how" +
                    " I am qualified for the role", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See my options for entering qualifications")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("NewApplication")]
        public void SeeMyOptionsForEnteringQualifications()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "NewApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See my options for entering qualifications", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
 testRunner.When("I navigate to the Qualifications page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then("a http status code of 200 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.And("the page content includes the following: Education history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("the page content includes the following: School, college and university qualifica" +
                        "tions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And("the page content includes the following: Do you want to add any qualifications?", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Opt to add my first qualification")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("NewApplication")]
        public void OptToAddMyFirstQualification()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "NewApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Opt to add my first qualification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "DoYouWantToAddAnyQualifications",
                            "true"});
#line 21
 testRunner.When("I post to the Qualifications page", ((string)(null)), table9, "When ");
#line hidden
#line 24
 testRunner.Then("I am redirected to the Add Qualification Select Type page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.And("the page redirect content includes the following: What is your most recent qualif" +
                        "ication?", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validation error on qualifications page")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("NewApplication")]
        public void ValidationErrorOnQualificationsPage()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "NewApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validation error on qualifications page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
 testRunner.When("I post an empty form to the Qualifications page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then("a http status code of 200 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.And("the page content includes the following error: Select if you want to add any qual" +
                        "ifications", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See the qualifications I\'ve already entered")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void SeeTheQualificationsIveAlreadyEntered()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See the qualifications I\'ve already entered", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
 testRunner.When("I navigate to the Qualifications page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("a http status code of 200 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.And("the page content includes the following: Education history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("the page content includes the following: School, college and university qualifica" +
                        "tions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("the page content includes the following: Have you completed this section?", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validation error on completed qualifications page")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void ValidationErrorOnCompletedQualificationsPage()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validation error on completed qualifications page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "ShowQualifications",
                            "true"});
#line 49
 testRunner.When("I post to the Qualifications page", ((string)(null)), table10, "When ");
#line hidden
#line 52
 testRunner.Then("a http status code of 200 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
 testRunner.And("the page content includes the following error: Select if you have finished this s" +
                        "ection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Confirm completion of the qualifications page")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void ConfirmCompletionOfTheQualificationsPage()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Confirm completion of the qualifications page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table11.AddRow(new string[] {
                            "ShowQualifications",
                            "true"});
                table11.AddRow(new string[] {
                            "IsSectionCompleted",
                            "true"});
#line 60
 testRunner.When("I post to the Qualifications page", ((string)(null)), table11, "When ");
#line hidden
#line 64
 testRunner.Then("I am redirected to the Application Tasklist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Confirm non-completion of the qualifications page")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void ConfirmNon_CompletionOfTheQualificationsPage()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Confirm non-completion of the qualifications page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "ShowQualifications",
                            "true"});
                table12.AddRow(new string[] {
                            "IsSectionCompleted",
                            "false"});
#line 70
 testRunner.When("I post to the Qualifications page", ((string)(null)), table12, "When ");
#line hidden
#line 74
 testRunner.Then("I am redirected to the Application Tasklist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete multiple qualifications of a single type")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void DeleteMultipleQualificationsOfASingleType()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete multiple qualifications of a single type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 80
 testRunner.When("I navigate to the Delete Qualifications (multiple) page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("a http status code of 200 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
 testRunner.And("the page content includes the following: Do you want to delete these qualificatio" +
                        "ns?", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a single qualification of a single type")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void DeleteASingleQualificationOfASingleType()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a single qualification of a single type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 87
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 88
 testRunner.When("I navigate to the Delete Qualifications (single) page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
 testRunner.Then("a http status code of 200 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
 testRunner.And("the page content includes the following: Do you want to delete this qualification" +
                        "?", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Opt to add another qualification")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void OptToAddAnotherQualification()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Opt to add another qualification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 96
 testRunner.When("I navigate to the Add Qualification Select Type page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
 testRunner.Then("the page content includes the following: Add another qualification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Confirm deletion of a qualification")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void ConfirmDeletionOfAQualification()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Confirm deletion of a qualification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 103
 testRunner.When("I post an empty form to the Delete Qualifications (single) page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
 testRunner.Then("I am redirected to the Qualifications page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Confirm deletion of multiple qualifications of a single type")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void ConfirmDeletionOfMultipleQualificationsOfASingleType()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Confirm deletion of multiple qualifications of a single type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 110
 testRunner.When("I post an empty form to the Delete Qualifications (multiple) page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 111
 testRunner.Then("I am redirected to the Qualifications page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
