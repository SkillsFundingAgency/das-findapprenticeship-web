// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.FAA.Web.AcceptanceTests.Features.Apply
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Jobs")]
    public partial class JobsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Jobs.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Apply", "Jobs", "As an FAA User\r\nI can complete the Jobs section\r\nSo that I can show my work exper" +
                    "ience", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See my options for entering jobs")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("NewApplication")]
        public void SeeMyOptionsForEnteringJobs()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "NewApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See my options for entering jobs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
 testRunner.When("I navigate to the Jobs page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then("a http status code of 200 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.And("the page content includes the following: Work history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("the page content includes the following: Jobs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Opt to add my first job")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("NewApplication")]
        public void OptToAddMyFirstJob()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "NewApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Opt to add my first job", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "DoYouWantToAddAnyJobs",
                            "true"});
#line 20
 testRunner.When("I post to the Jobs page", ((string)(null)), table4, "When ");
#line hidden
#line 23
 testRunner.Then("I am redirected to the Add a Job page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a job")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("NewApplication")]
        public void AddAJob()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "NewApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a job", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
 testRunner.When("I navigate to the Add a Job page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then("a http status code of 200 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
 testRunner.And("the page content includes the following: Work history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("the page content includes the following: Add a job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Fill out the Add a job page")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("NewApplication")]
        public void FillOutTheAddAJobPage()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "NewApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fill out the Add a job page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "JobTitle",
                            "Lapidary worker"});
                table5.AddRow(new string[] {
                            "EmployerName",
                            "Rocks u Like"});
                table5.AddRow(new string[] {
                            "JobDescription",
                            "Polishing semi-precious stones and the like"});
                table5.AddRow(new string[] {
                            "StartDateMonth",
                            "07"});
                table5.AddRow(new string[] {
                            "StartDateYear",
                            "2021"});
                table5.AddRow(new string[] {
                            "IsCurrentRole",
                            "true"});
#line 38
 testRunner.When("I post to the Add a Job page", ((string)(null)), table5, "When ");
#line hidden
#line 46
 testRunner.Then("I am redirected to the Jobs page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validation on the Add a job page")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("NewApplication")]
        public void ValidationOnTheAddAJobPage()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "NewApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validation on the Add a job page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 52
 testRunner.When("I post an empty form to the Add a Job page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.Then("the page content includes the following error: Enter the job title for this job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.And("the page content includes the following error: Enter the company you worked for", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And("the page content includes the following error: Enter the responsibilities you had" +
                        " for this job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("the page content includes the following error: Enter the start date for this job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("the page content includes the following error: Select if this is your current job" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validation error on job summary page")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("NewApplication")]
        public void ValidationErrorOnJobSummaryPage()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "NewApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validation error on job summary page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 63
 testRunner.When("I post an empty form to the Jobs page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
 testRunner.Then("a http status code of 200 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
 testRunner.And("the page content includes the following error: Select if you want to add any jobs" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Completion of job section without entering any jobs")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("NewApplication")]
        public void CompletionOfJobSectionWithoutEnteringAnyJobs()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "NewApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Completion of job section without entering any jobs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "DoYouWantToAddAnyJobs",
                            "false"});
#line 71
 testRunner.When("I post to the Jobs page", ((string)(null)), table6, "When ");
#line hidden
#line 74
 testRunner.Then("I am redirected to the Application Tasklist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Revisit the jobs page having already completed it previously")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void RevisitTheJobsPageHavingAlreadyCompletedItPreviously()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revisit the jobs page having already completed it previously", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 80
 testRunner.When("I navigate to the Jobs page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("a http status code of 200 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
 testRunner.And("the page content includes the following: Work history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
 testRunner.And("the page content includes the following: Jobs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.And("the page content includes the following: Junior Developer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Confirm completion of the jobs page on a return visit")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void ConfirmCompletionOfTheJobsPageOnAReturnVisit()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Confirm completion of the jobs page on a return visit", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "IsSectionCompleted",
                            "false"});
                table7.AddRow(new string[] {
                            "ShowJobHistory",
                            "true"});
#line 90
 testRunner.When("I post to the Jobs page", ((string)(null)), table7, "When ");
#line hidden
#line 94
 testRunner.Then("I am redirected to the Application Tasklist page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit an existing job")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void EditAnExistingJob()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit an existing job", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 100
 testRunner.When("I navigate to the Edit Job page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
 testRunner.Then("a http status code of 200 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
 testRunner.And("the page content includes the following: Work history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.And("the page content includes the following: Add a job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Complete edit of an existing job")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void CompleteEditOfAnExistingJob()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complete edit of an existing job", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "JobTitle",
                            "Lapidary worker level 2"});
                table8.AddRow(new string[] {
                            "EmployerName",
                            "Rocks u Like"});
                table8.AddRow(new string[] {
                            "JobDescription",
                            "Polishing semi-precious stones and the like"});
                table8.AddRow(new string[] {
                            "StartDateMonth",
                            "09"});
                table8.AddRow(new string[] {
                            "StartDateYear",
                            "2022"});
                table8.AddRow(new string[] {
                            "IsCurrentRole",
                            "true"});
#line 109
 testRunner.When("I post to the Edit Job page", ((string)(null)), table8, "When ");
#line hidden
#line 117
 testRunner.Then("I am redirected to the Jobs page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a job")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void DeleteAJob()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a job", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 123
 testRunner.When("I navigate to the Delete Job page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
 testRunner.Then("a http status code of 200 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 125
 testRunner.And("the page content includes the following: Do you want to delete this job?", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.And("the page content includes the following: Junior Developer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Confirm deletion of a job")]
        [NUnit.Framework.CategoryAttribute("WireMockServer")]
        [NUnit.Framework.CategoryAttribute("AuthenticatedUser")]
        [NUnit.Framework.CategoryAttribute("ExistingApplication")]
        public void ConfirmDeletionOfAJob()
        {
            string[] tagsOfScenario = new string[] {
                    "WireMockServer",
                    "AuthenticatedUser",
                    "ExistingApplication"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Confirm deletion of a job", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 131
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 132
 testRunner.When("I post an empty form to the Delete Job page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 133
 testRunner.Then("I am redirected to the Jobs page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
